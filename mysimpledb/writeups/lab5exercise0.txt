Your name(s): 

1. Explain how you modified SynchronizedThreads in exercise 1.

	I changed the increment() to be synchronized, and that worked.

2. Briefly describe (1-2 sentences) an alternate implementation for exercise 1.

	Alternatively, you can modify the statement inside the for loop in run() to:
		synchronized (this.counter) {
			// increment
		}
	This will lock on counter, which works.

3. Exercise 2: Explain the deadlock that happens in Deadlock in terms of locks and threads waiting on locks.
   The two threads in this case are alphonse and gaston. 

a) What objects are being locked? 

alphonse and gaston's bow() method are being locked.

b) Who has what locks? 

gaston has the lock on alphonse's bow() and alphonse has the lock on gaston's bow().

c) How does deadlock occur?

	Both threads waits for each other to exit bow(), and that never happens
	because bowBack() is also synchronized, meaning that they will block each
	other and bow() will never exit.

4. Return to exercise 1, can deadlock occur here?  Explain why or why not.

	No, because there is only one synchronized method/statement and 
	there is only one queue for the wait.

5. Explain why acquireLock uses a synchronized statement inside the body of the method.
   In other words, why not just make the acquireLock method synchronized, just like releaseLock?
   Will this work? Why or why not?

	There is no need to lock more than what is needed. I.e., the only place
	where locking is necessary is when threads tries to check whether a lock
	is in use or not. They can sleep (spin-wait) on their own.
	
	Alternatively, this will not work because they are all waiting on each
	other to exit the method, and no one will release the lock.
	
