Report for Lab 3
----------------

After you complete lab 5, please answer the following questions.

1. What is your name?  If you work with a partner, be sure to write both of your names.

	Yuxin David Huang, Jiayang Li

2. What did you think of this assignment?

	It was hard but rewarding

3. What was the hardest part of this assignment?

	Figuring out whether to use synchronized methods vs. statements;
	making sure LockManager works correctly (which is vague, but
	most of it was working on isLockFree, which is my big helper
	method to determine whether a lock is free).

4. Describe any missing or incomplete elements of your code.

	None.

5. Roughly how long did you spend working on this lab?

	8-10 hrs.

6. Describe your lock manager implementation.  Here are some specific questions to answer:

a) Where is your lock manager located?  (I.e., is it a separate class, part of BufferPool, etc.)

	Separate class.

b) What specific information do you store and how do you store it?  

	I store the lock table as a Map of (PageId, List<LockTableEntry>) where
	LockTableEntry contains TransactionId, whether this transaction was
	granted the lock (for concurrent read access) and whether the lock
	is exclusive or not.

c) Briefly describe what happens when a new transaction requests a page.
   I.e., walk thru how the lock manager decides whether or not to grant the request.
   Your description should reference the data structures that describe in part (b).

	When a transaction requests a page, LockManager first checks if the list
	exists. If not (meaning no one has ever requested a lock for this page), it
	instantializes the list and returns true (free).
	
	If it does exist, it walks through every recorded request, and checks if
	the TransactionId matches. If it does, then it checks for duplicate request
	vs. upgrade request. If it is an upgrade request, if no one has a granted
	read lock on the same page, it returns true (free); if there is someone,
	it saves the index of the last granted shared lock on the same page and adds
	the upgrade request after that. If the request is a duplicate it returns
	true. If the TransactionId does not match, it records the index of the last
	granted shared lock on the page, and inserts the request after that one.
	
	

d) Briefly explain how you manage locks when inserting a tuple into a HeapFile.
   In particular, how do you acquire/release locks when looking for a page to insert.

	When looking for a page to insert, it first acquires a read lock, looks for
	a spot, and acquires the write lock on the page that has a spot, then
	inserts the tuple. If every page is full, it creates a new, empty page and
	writes it to disk. Then it acquires a write lock on the new page, and
	inserts the tuple.
	
